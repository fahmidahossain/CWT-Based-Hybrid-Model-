# -*- coding: utf-8 -*-
"""MicroSleep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MV6uwPeJ3UOp8wbtqrCC95EyVmZ6MUzR
"""

from __future__ import division
import os
import glob
import numpy
from matplotlib import pyplot

pip install pycwt

import pycwt as wavelet
from pycwt.helpers import find

import pandas as pd
import numpy as np
import cv2

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/C1/C1_P1.csv'
df = pd.read_csv(file_path)

# Display all rows
pd.set_option('display.max_rows', None)

# Display all columns
pd.set_option('display.max_columns', None)

# Show the DataFrame
print(df)

print(f"Total number of rows: {len(df)}")

# List of columns to keep
eeg_columns = ['EEG 1', 'EEG 2', 'EEG 3', 'EEG 4', 'EEG 5', 'EEG 6', 'EEG 7', 'EEG 8']

# Filter the DataFrame to keep only the EEG columns
df_eeg = df[eeg_columns]

from sklearn.preprocessing import StandardScaler
# Standardize the EEG data
scaler = StandardScaler()
df_eeg_scaled = pd.DataFrame(scaler.fit_transform(df_eeg), columns=df_eeg.columns)

print(df_eeg_scaled.head())

# Get the first 7680 rows
df_eeg_first_7680 = df_eeg_scaled.head(7680)

# Detrend function
def detrend(data):
    t = np.arange(len(data))
    p = np.polyfit(t, data, 1)
    return data - np.polyval(p, t)

# Apply detrending
df_eeg_detrended = df_eeg_first_7680.apply(detrend, axis=0)

import pandas as pd

# Assuming df_eeg_detrended is your dataframe with 7680 rows
segments = []

# Loop through the dataframe in steps of 256 rows
for i in range(0, len(df_eeg_detrended), 256):
    segment = df_eeg_detrended.iloc[i:i + 256]
    segments.append(segment)

sampling_frequency = 256  # Adjust according to your data

# Process each segment and create CWT images
for idx, segment in enumerate(segments):
    data = segment.values.flatten()  # Convert dataframe to a flat array
    wave, scales, freqs, power = apply_cwt(data, sampling_frequency)
    filename = f'cwt_image_segment_{idx}.png'
    plot_cwt_image(power, scales, freqs, filename)
    print(f'Segment {idx}: CWT image saved as {filename}')

import pycwt as wavelet
import numpy as np
import matplotlib.pyplot as plt
import os

def apply_cwt(data, sampling_frequency):
    dt = 1 / sampling_frequency  # Time step
    mother = wavelet.Morlet(6)  # Morlet wavelet
    s0 = 2 * dt
    dj = 1 / 12
    J = 7 / dj
    alpha, _, _ = wavelet.ar1(data)
    wave, scales, freqs, coi, fft, fftfreqs = wavelet.cwt(data, dt, dj, s0, J, mother)
    power = (np.abs(wave)) ** 2
    power /= scales[:, None]
    return wave, scales, freqs, power

def plot_cwt_image(power, scales, freqs, filename):
    plt.figure(figsize=(10, 6))
    plt.imshow(np.log10(power), aspect='auto', extent=[0, power.shape[1], freqs[0], freqs[-1]], cmap='jet', origin='lower')
    plt.colorbar(label='Log10 Power')
    plt.ylabel('Frequency (Hz)')
    plt.xlabel('Time (s)')
    plt.title('CWT Power Spectrum')
    plt.savefig(filename)
    plt.close()

# Define the path where images will be saved
save_path = '/content/drive/MyDrive/C1/'

# Ensure the directory exists
os.makedirs(save_path, exist_ok=True)

# Process each segment and create CWT images
for idx, segment in enumerate(segments):
    data = segment.values.flatten()  # Convert dataframe to a flat array
    wave, scales, freqs, power = apply_cwt(data, sampling_frequency)
    filename = os.path.join(save_path, f'cwt_image_segment_{idx}.png')
    plot_cwt_image(power, scales, freqs, filename)
    print(f'Segment {idx}: CWT image saved as {filename}')

import matplotlib.image as mpimg

# Number of rows and columns in the grid
n_rows = 5
n_cols = 6

# Create a figure with subplots
fig, axes = plt.subplots(n_rows, n_cols, figsize=(20, 15), gridspec_kw={'hspace': 0, 'wspace': 0})
axes = axes.flatten()  # Flatten the 2D array of axes for easy iteration

# Display images in the grid
for idx, ax in enumerate(axes):
    if idx < len(segments):
        filename = os.path.join(save_path, f'cwt_image_segment_{idx}.png')
        img = mpimg.imread(filename)
        ax.imshow(img)
        ax.axis('off')  # Turn off axis
    else:
        ax.axis('off')  # Turn off axis for empty subplots

plt.tight_layout(pad=0)
plt.show()